// Generated by gencpp from file costmap_plugins/keepOutZoneRequest.msg
// DO NOT EDIT!


#ifndef COSTMAP_PLUGINS_MESSAGE_KEEPOUTZONEREQUEST_H
#define COSTMAP_PLUGINS_MESSAGE_KEEPOUTZONEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace costmap_plugins
{
template <class ContainerAllocator>
struct keepOutZoneRequest_
{
  typedef keepOutZoneRequest_<ContainerAllocator> Type;

  keepOutZoneRequest_()
    : command(0)
    , cost(0)
    , zone()
    , id(0)  {
    }
  keepOutZoneRequest_(const ContainerAllocator& _alloc)
    : command(0)
    , cost(0)
    , zone(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;

   typedef uint8_t _cost_type;
  _cost_type cost;

   typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::PointStamped_<ContainerAllocator> >> _zone_type;
  _zone_type zone;

   typedef uint32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> const> ConstPtr;

}; // struct keepOutZoneRequest_

typedef ::costmap_plugins::keepOutZoneRequest_<std::allocator<void> > keepOutZoneRequest;

typedef boost::shared_ptr< ::costmap_plugins::keepOutZoneRequest > keepOutZoneRequestPtr;
typedef boost::shared_ptr< ::costmap_plugins::keepOutZoneRequest const> keepOutZoneRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator1> & lhs, const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.cost == rhs.cost &&
    lhs.zone == rhs.zone &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator1> & lhs, const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace costmap_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e4d007d03a9492c1e9db89ba981e084";
  }

  static const char* value(const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e4d007d03a9492cULL;
  static const uint64_t static_value2 = 0x1e9db89ba981e084ULL;
};

template<class ContainerAllocator>
struct DataType< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costmap_plugins/keepOutZoneRequest";
  }

  static const char* value(const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 command # 0 - add; 1 - remove; 2 - clear; 3 - start record; 4 - stop record\n"
"uint8 cost\n"
"geometry_msgs/PointStamped[] zone\n"
"uint32 id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.cost);
      stream.next(m.zone);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct keepOutZoneRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costmap_plugins::keepOutZoneRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "cost: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cost);
    s << indent << "zone[]" << std::endl;
    for (size_t i = 0; i < v.zone.size(); ++i)
    {
      s << indent << "  zone[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.zone[i]);
    }
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTMAP_PLUGINS_MESSAGE_KEEPOUTZONEREQUEST_H
